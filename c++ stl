#MULTIMAP : 
Multimap is similar to map with an addition that multiple elements can have same keys. Also, it is NOT required that the key value and 
mapped value pair has to be unique in this case.
 // insert elements in random order 
    gquiz1.insert(pair <int, int> (1, 40));  or insert({1,2}) ; 
    gquiz1.insert(pair <int, int> (2, 30)); 
    gquiz1.insert(pair <int, int> (2, 60)); 
 
    // printing multimap gquiz1 
    multimap <int, int> :: iterator itr;
    for (itr = gquiz1.begin(); itr != gquiz1.end(); ++itr) 
    { 
        cout  <<  '\t' << itr->first 
              <<  '\t' << itr->second << '\n'; 
    } 
    // assigning the elements from gquiz1 to gquiz2 
    multimap <int, int> gquiz2(gquiz1.begin(),gquiz1.end()); 
     // remove all elements with key = 4 
    int num; 
    num = gquiz2.erase(4);
    
    // find() function finds the position at which 3 is  ........ The elements from position 3 in multimap are : \n"; 
    for (auto itr = mp.find(3); itr != mp.end(); itr++) 
        cout << itr->first   << '\t' << itr->second << '\n';
        
    "multimap mp has  number of elements"; ----------> mp.size() ; 
           
